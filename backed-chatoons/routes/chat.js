const dotenv = require('dotenv');
const express = require('express');
const app = express();
const router = express.Router();
const moment = require('moment');
const Message = require('../models/messages');
const User = require('../models/user');
const AWS = require('aws-sdk');
//const fs = require('fs');
const cloudinary = require('cloudinary').v2;
//const fileType = require('file-type');
const formidable = require('formidable');

// configure the keys for accessing AWS
/*AWS.config.update({
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
});*/


// configure AWS to work with promises
//AWS.config.setPromisesDependency(bluebird);

// create S3 instance
//const s3 = new AWS.S3();


//get message from friend

router.post('/startchat',(req, res, next) => {
    Message.create({
        messengers: [req.body.senderid, req.body.receiverid],
        messagethreadtimestamp:moment(new Date()).format("YYYY-MM-DD HH:mm:ss:SSS"),
          messagethreadvisible: true,
        })
       .then(message =>{
        console.log(message._id);
        
        var newmessage = {   
            messagesender:req.body.messagesender,
            messagereceiver:req.body.messagereceiver,
            textmessage:req.body.textmessage,
            imagemessage:req.body.imagemessage,
            emoticonmessage:req.body.emoticonmessage,
            messagesent:moment(new Date()).format("YYYY-MM-DD HH:mm:ss:SSS")
        }
        Message.findByIdAndUpdate(message._id, { $push:{messages: newmessage} })
        .then(result => {
            setTimeout(() => {
                Message.findByIdAndUpdate(message._id, { messagethreadvisible: 'false' }, {new: true}).then(visibleresponse => {
                    console.log(visibleresponse)
                })
            }, 60000); // Create timer for thread expiry
            res.json(result)
        })
        .catch(err => {
            console.log(err)
            res.send(err)})
        })
    })

    router.post('/:messagethreadid/sendmessage',(req, res, next) => {  
        var textmessage = '';
        var messagereceiver = '';
        var messagesender = '';
        var imageFile = null;
        var imageUpload = false;

        cloudinary.config({
            cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
            api_key: process.env.CLOUDINARY_API_KEY,
            api_secret: process.env.CLOUDINARY_API_SECRET
          }); 

        new formidable.IncomingForm().parse(req)
        .on('field', (name, field) => {
            console.log('Field', name, field);
            if(name=='textmessage') {
                textmessage = field;
            }
            if(name=='messagesender') {
                messagesender = field;
            }
            if(name=='messagereceiver') {
                messagereceiver = field;
            }
        })
        .on('file', (name, file) => {
            console.log('Uploaded file', name, file);
            imageFile = file;
            imageUpload = true;
        })
        .on('aborted', () => {
            console.error('Request aborted by the user')
        })
        .on('error', (err) => {
            console.error('Error', err)
            throw err
        })
        .on('end', () => {
            
            var newmessage = {
                messagesender:req.body.messagesender,
                messagereceiver:req.body.messagereceiver,
                messagesent:moment(new Date()).format("YYYY-MM-DD HH:mm:ss:SSS")
            };
            if(imageUpload) {
                cloudinary.config({
                    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
                    api_key: process.env.CLOUDINARY_API_KEY,
                    api_secret: process.env.CLOUDINARY_API_SECRET
                  }); 
                cloudinary.uploader.upload(imageFile.path, { tags: 'chat image' })
                .then(function (image) {
                    console.log();
                    console.log("** File Upload (Promise)");
                    console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
                    console.log("* " + image.public_id);
                    console.log("* " + image.url);
                    const cartImageUrl = cloudinary.url(image.public_id, {transformation: [{width: 50, height: 50, crop: 'thumb'}, {effect: "cartoonify"}]});
                    newmessage = {
                        messagesender:messagesender,
                        messagereceiver:messagereceiver,
                        imagemessage:cartImageUrl,
                        messagesent:moment(new Date()).format("YYYY-MM-DD HH:mm:ss:SSS")
                    }
                    Message.findByIdAndUpdate(req.params.messagethreadid, { $push:{messages: newmessage} })
                    .then(result => {
                        res.json(result);
                        res.end();
                    })
                    .catch(err => {
                        console.log(err)
                        res.send(err)
                    })
                })
                .catch(function (err) {
                    console.log();
                    console.log("** File Upload (Promise)");
                    if (err) { console.warn(err); }
                });
            }

            if(textmessage!='') {
                newmessage = {
                    messagesender:messagesender,
                    messagereceiver:messagereceiver,
                    textmessage:textmessage,
                    messagesent:moment(new Date()).format("YYYY-MM-DD HH:mm:ss:SSS")
                }

                Message.findByIdAndUpdate(req.params.messagethreadid, { $push:{messages: newmessage} })
                .then(result => {
                    res.json(result);
                    res.end();
                })
                .catch(err => {
                    console.log(err)
                    res.send(err)
                })
            }
                       
            
            /*
            const path = imageFile.path;
            const buffer = fs.readFileSync(path);
            const type = fileType(buffer);
            const timestamp = Date.now().toString();
            const fileName = `chatImages/${timestamp}-lg`;

            //Upload to S3
            const params = {
                ACL: 'public-read',
                Body: buffer,
                Bucket: process.env.S3_BUCKET,
                ContentType: type.mime,
                Key: `${fileName}.${type.ext}`
            };            
            s3.upload(params, function(err,data) {
                console.log("Upload result ====> ", err, data);
                var transformedImgUrl = cloudinary.image(data.Location, {secure: true, transformation: [
                    {width: 50, height: 50, crop: "thumb"},
                    {effect: "cartoonify"}
                ]})
            })*/
        })

    })

router.get('/:messagethreadid',(req, res, next) => {
    Message.findOne({_id:req.params.messagethreadid})
    .then(theResponse => {
        res.json(theResponse)
    })
    .catch(err => {
        res.json(err)})
    })

router.get('/chatrequests/:requestreceiverid',(req, res, next) => {
    Message.find({messengers:req.params.requestreceiverid, messagethreadvisible: true})
    .then(theResponse => {
        res.json(theResponse)
    })
    .catch(err => {
        res.json(err)})
    })

module.exports = router;